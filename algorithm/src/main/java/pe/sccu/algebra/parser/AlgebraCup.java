
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 20 08:50:10 KST 2013
//----------------------------------------------------

package pe.sccu.algebra.parser;

import pe.sccu.algebra.Expr;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 20 08:50:10 KST 2013
  */
public class AlgebraCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AlgebraCup() {super();}

  /** Constructor which sets the default scanner. */
  public AlgebraCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AlgebraCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\005\000" +
    "\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\010\004\004\005\005\011\011\001\002\000" +
    "\014\002\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb\001\002" +
    "\000\014\002\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa\001" +
    "\002\000\004\002\023\001\002\000\012\002\ufffe\007\ufffe" +
    "\010\015\012\ufffe\001\002\000\014\002\ufffc\006\017\007" +
    "\ufffc\010\ufffc\012\ufffc\001\002\000\010\004\004\005\005" +
    "\011\011\001\002\000\006\002\001\007\013\001\002\000" +
    "\010\004\004\005\005\011\011\001\002\000\012\002\uffff" +
    "\007\uffff\010\015\012\uffff\001\002\000\010\004\004\005" +
    "\005\011\011\001\002\000\014\002\ufffd\006\017\007\ufffd" +
    "\010\ufffd\012\ufffd\001\002\000\010\004\004\005\005\011" +
    "\011\001\002\000\014\002\ufff9\006\017\007\ufff9\010\ufff9" +
    "\012\ufff9\001\002\000\006\007\013\012\022\001\002\000" +
    "\014\002\ufff8\006\ufff8\007\ufff8\010\ufff8\012\ufff8\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\012\002\005\003\011\004\006\005\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\020\004" +
    "\006\005\007\001\001\000\002\001\001\000\006\004\013" +
    "\005\007\001\001\000\002\001\001\000\004\005\015\001" +
    "\001\000\002\001\001\000\004\005\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AlgebraCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AlgebraCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AlgebraCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AlgebraCup$actions {



  private final AlgebraCup parser;

  /** Constructor */
  CUP$AlgebraCup$actions(AlgebraCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AlgebraCup$do_action(
    int                        CUP$AlgebraCup$act_num,
    java_cup.runtime.lr_parser CUP$AlgebraCup$parser,
    java.util.Stack            CUP$AlgebraCup$stack,
    int                        CUP$AlgebraCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AlgebraCup$result;

      /* select the action based on the action number */
      switch (CUP$AlgebraCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // factor ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-1)).value;
		
                            RESULT = e1;
                        
              CUP$AlgebraCup$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-2)), ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), RESULT);
            }
          return CUP$AlgebraCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // factor ::= factor EXP factor 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$AlgebraCup$stack.peek()).value;
		
                            RESULT = e1.exp(e2);
                        
              CUP$AlgebraCup$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-2)), ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), RESULT);
            }
          return CUP$AlgebraCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // factor ::= VAR 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$AlgebraCup$stack.peek()).value;
		
                            RESULT = e1;
                        
              CUP$AlgebraCup$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), RESULT);
            }
          return CUP$AlgebraCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // factor ::= NUM 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$AlgebraCup$stack.peek()).value;
		
                            RESULT = e1;
                        
              CUP$AlgebraCup$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), RESULT);
            }
          return CUP$AlgebraCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // term ::= factor 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$AlgebraCup$stack.peek()).value;
		
                            RESULT = e1;
                        
              CUP$AlgebraCup$result = parser.getSymbolFactory().newSymbol("term",2, ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), RESULT);
            }
          return CUP$AlgebraCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // term ::= term MUL factor 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$AlgebraCup$stack.peek()).value;
		
                            RESULT = e1.mul(e2);
                        
              CUP$AlgebraCup$result = parser.getSymbolFactory().newSymbol("term",2, ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-2)), ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), RESULT);
            }
          return CUP$AlgebraCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= term 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$AlgebraCup$stack.peek()).value;
		
                            RESULT = e1;
                        
              CUP$AlgebraCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), RESULT);
            }
          return CUP$AlgebraCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr PLUS term 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$AlgebraCup$stack.peek()).value;
		
                            RESULT = e1.add(e2);
                        
              CUP$AlgebraCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-2)), ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), RESULT);
            }
          return CUP$AlgebraCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= grammar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-1)).right;
		Expr start_val = (Expr)((java_cup.runtime.Symbol) CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-1)).value;
		RESULT = start_val;
              CUP$AlgebraCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.elementAt(CUP$AlgebraCup$top-1)), ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AlgebraCup$parser.done_parsing();
          return CUP$AlgebraCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // grammar ::= expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$AlgebraCup$stack.peek()).value;
		
                            RESULT = e1;
                        
              CUP$AlgebraCup$result = parser.getSymbolFactory().newSymbol("grammar",0, ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AlgebraCup$stack.peek()), RESULT);
            }
          return CUP$AlgebraCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

